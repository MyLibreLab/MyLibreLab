/*
 * Copyright (C) 2020 MyLibreLab
 * Based on MyOpenLab by Carmelo Salafia www.myopenlab.de
 * Copyright (C) 2004  Carmelo Salafia cswi@gmx.de
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package VisualLogic;

import java.awt.Color;

import javax.swing.DefaultListModel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;

class TheGraphDouble {
    public double[] yValues;
    public String name = "";
    public double value = 0;

    public TheGraphDouble(int bufflen) {
        yValues = new double[bufflen];
    }
}


/**
 * @author Salafia
 */
public class FrameDoubleGraph extends javax.swing.JFrame {
    private Basis basis;
    private int distance = 20;
    private TheGraphDouble[] graphs;
    public double[] xValues;
    public double[] nullValue = new double[1];

    public int abtastFreq = 10;
    public int refreshFreq = 250;
    private int internalC = 0;
    private int refreshC = 0;
    private boolean dontRefresh = false;
    private DefaultListModel model = new DefaultListModel();

    private int bufflen = 100;
    private int newbufflen = bufflen;

    /**
     * Creates new form FrameBooleanGraph
     */
    public FrameDoubleGraph(Basis basis) {
        initComponents();
        this.basis = basis;

        SpinnerNumberModel model1 = new SpinnerNumberModel(abtastFreq, 1, 5000, 1);
        jSpinner1.setModel(model1);

        SpinnerNumberModel model2 = new SpinnerNumberModel(refreshFreq, 1, 5000, 1);
        jSpinner2.setModel(model2);

        SpinnerNumberModel model3 = new SpinnerNumberModel(bufflen, 100, 5000, 10);
        jSpinner3.setModel(model3);

        JSpinner.NumberEditor editor1 = new JSpinner.NumberEditor(jSpinner1);
        jSpinner1.setEditor(editor1);

        JSpinner.NumberEditor editor2 = new JSpinner.NumberEditor(jSpinner2);
        jSpinner2.setEditor(editor2);

        JSpinner.NumberEditor editor3 = new JSpinner.NumberEditor(jSpinner3);
        jSpinner3.setEditor(editor3);
        // setIconImage(basis.getFrameMain().iconImage);
        javax.swing.ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/Bilder/graphDouble16x16.gif"));
        setIconImage(icon.getImage());
        jList1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify
     * this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSplitPane1 = new javax.swing.JSplitPane();
        myGraph1 = new MyGraph.MyGraph();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("VisualLogic/FrameDoubleGraph"); // NOI18N
        setTitle(bundle.getString("AnalogGraphWindow")); // NOI18N
        setAlwaysOnTop(true);

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jLabel1.setText(bundle.getString("Sample_Freq.")); // NOI18N

        jLabel2.setText(bundle.getString("Refresh_Freq.")); // NOI18N

        jButton1.setText(bundle.getString("Reset")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Buffer");

        jSpinner3.setPreferredSize(new java.awt.Dimension(25, 20));
        jSpinner3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner3StateChanged(evt);
            }
        });

        jCheckBox1.setText("Trigger");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup().addContainerGap().add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSpinner1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84,
                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSpinner2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70,
                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSpinner3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72,
                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jCheckBox1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jButton1)
                        .addContainerGap(47, Short.MAX_VALUE)));
        jPanel1Layout
                .setVerticalGroup(
                        jPanel1Layout
                                .createParallelGroup(
                                        org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jSpinner1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel1).add(jLabel2)
                                        .add(jSpinner2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel3)
                                        .add(jSpinner3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jCheckBox1).add(jButton1)));

        jSplitPane1.setDividerLocation(130);

        myGraph1.setXAxisFormatString("###000");
        myGraph1.setXAxisText("");
        myGraph1.setYAxisText("");
        myGraph1.setAutoScroll(java.lang.Boolean.TRUE);
        myGraph1.setAutoZoomY(java.lang.Boolean.TRUE);
        myGraph1.setCoordinatesVisible(java.lang.Boolean.FALSE);
        myGraph1.setMaxX(new java.lang.Double(500.0));
        myGraph1.setMinX(new java.lang.Double(0.0));
        myGraph1.setNullLineVisible(java.lang.Boolean.FALSE);
        jSplitPane1.setRightComponent(myGraph1);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {"Item 1", "Item 2", "Item 3", "Item 4", "Item 5"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane1.setViewportView(jList1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup().add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner3StateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSpinner3StateChanged
    {// GEN-HEADEREND:event_jSpinner3StateChanged
        newbufflen = ((Integer) jSpinner3.getValue()).intValue();
    }// GEN-LAST:event_jSpinner3StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButton1ActionPerformed
    {// GEN-HEADEREND:event_jButton1ActionPerformed
        init();
    }// GEN-LAST:event_jButton1ActionPerformed

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSpinner2StateChanged
    {// GEN-HEADEREND:event_jSpinner2StateChanged
        refreshFreq = ((Integer) jSpinner2.getValue()).intValue();
    }// GEN-LAST:event_jSpinner2StateChanged

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt)// GEN-FIRST:event_jSpinner1StateChanged
    {// GEN-HEADEREND:event_jSpinner1StateChanged
        abtastFreq = ((Integer) jSpinner1.getValue()).intValue();
    }// GEN-LAST:event_jSpinner1StateChanged

    // Returns the Columns Index
    // else -1
    private int getColumnIndex(String columnTitle) {
        for (int i = 0; i < graphs.length; i++) {
            if (graphs[i].name.equalsIgnoreCase(columnTitle)) {
                return i;
            }
        }
        return -1;
    }

    private Color[] colors = new Color[9];

    private void generateColors() {
        colors[0] = Color.RED;
        colors[1] = Color.GREEN;
        colors[2] = Color.YELLOW;
        colors[3] = Color.PINK;
        colors[4] = Color.ORANGE;
        colors[5] = Color.CYAN;
        colors[6] = Color.BLUE;
        colors[7] = Color.MAGENTA;
        colors[8] = Color.WHITE;
    }

    private Element[] tpNodes = null;

    public void init() {
        if (dontRefresh) return;
        myGraph1.setMaxX((double) bufflen);
        myGraph1.setAutoZoomY(true);
        model.clear();
        jList1.setCellRenderer(new ColorRenderer());
        model.addElement(new ColoredListCell("<All>", Color.WHITE));

        myGraph1.setAutoScroll(true);
        generateColors();
        tpNodes = basis.getCircuitBasis().getAllTestpointElementsDouble();
        // listAllDoubleTestpointNodes(tpNodes);
        myGraph1.graph.generateGraphs(tpNodes.length);
        counter = 0;
        xValues = new double[bufflen];
        graphs = new TheGraphDouble[tpNodes.length];
        int c = 0;

        for (int i = 0; i < tpNodes.length; i++) {
            myGraph1.graph.graphRenderer[i].pointType = 1;
            myGraph1.graph.graphRenderer[i].pointType = 1;

            graphs[i] = new TheGraphDouble(bufflen);

            graphs[i].value = 0;

            myGraph1.graph.graphRenderer[i].xValues = xValues;
            myGraph1.graph.graphRenderer[i].yValues = graphs[i].yValues;

            graphs[i].name = tpNodes[i].jGetCaption();
            graphs[i].value = 0;

            if (i < 9) {
                myGraph1.graph.graphRenderer[i].setLineColor(colors[i]);
                myGraph1.graph.graphRenderer[i].captionColor = colors[i];

                model.addElement(new ColoredListCell(tpNodes[i].jGetCaption(), colors[i]));
            } else {
                int rr = (int) (Math.random() * 255);
                int gg = (int) (Math.random() * 255);
                int bb = (int) (Math.random() * 255);
                Color col = new Color(rr, gg, bb);
                myGraph1.graph.graphRenderer[i].setLineColor(col);
                myGraph1.graph.graphRenderer[i].captionColor = col;

                model.addElement(new ColoredListCell(tpNodes[i].jGetCaption(), col));
            }

            myGraph1.graph.graphRenderer[i].caption = "";

            c += distance;
        }
        myGraph1.graph.back.positionX = 0;
        // myGraph1.setMaxX(500.0);
        myGraph1.setMaxY((double) c);

        jList1.setSelectedIndex(0);

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                myGraph1.graph.init();
                myGraph1.updateUI();
            }
        });

        internalC = 0;
        refreshC = 0;
    }

    public void stop() {

    }

    private int counter = 0;

    public void addValue(String colTitle, double value) {
        double val;
        int column = getColumnIndex(colTitle);

        if (column > -1) {
            if (internalC >= abtastFreq) {
                internalC = 0;
                next();
            }

            graphs[column].value = value;
            internalC++;
        }
    }

    /*
     * private void verarbeiteListe(ArrayList<VSObject> list) { double[] xValues; double[] yValues;
     * VSDouble val; int idx=0; DataEntry entry; VSObject obj;
     *
     *
     * int len=list.size();
     *
     * xValues=new double[len]; yValues=new double[len];
     *
     * for (int i=0;i<xValues.length;i++) { xValues[i]=i; yValues[i]=i; }
     *
     * VSObject o; VSDouble n; for (int i=0;i<yValues.length;i++) { o=list.get(i); n=(VSDouble)o;
     * yValues[i]=n.getValue(); }
     *
     *
     * for (int i=0;i<graphs.length;i++) { myGraph1.graph.graphRenderer[i].xValues=xValues;
     * myGraph1.graph.graphRenderer[i].yValues=yValues; }
     *
     * }
     *
     * private void sdfsd() { DataEntry entry; VSObject obj;
     *
     * for (int i=0;i<basis.dataHistory.size();i++) { entry = basis.dataHistory.getEntry(i);
     *
     * if (entry.values.size()>0) { obj=entry.values.get(0); if (obj instanceof VSDouble) {
     * verarbeiteListe(entry.values); } } } }
     */

    public void process() {

        if (tpNodes == null) return;
        if (tpNodes.length == 0) return;

        if (refreshC > refreshFreq) {
            refreshC = 0;

            if (jCheckBox1.isSelected()) {
                if (counter > bufflen) init();
            }

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    myGraph1.graph.init();
                    myGraph1.updateUI();
                }
            });
        }
        refreshC++;
    }

    public void next() {
        dontRefresh = true;
        if (graphs != null) {

            if (counter < bufflen) {
                fillBuffer(xValues, counter, counter);
                for (int i = 0; i < graphs.length; i++) {
                    fillBuffer(graphs[i].yValues, counter, graphs[i].value);
                }
            } else {
                scrollBuffer(xValues, counter, counter);
                for (int i = 0; i < graphs.length; i++) {
                    scrollBuffer(graphs[i].yValues, counter, graphs[i].value);
                }
            }

            int index = jList1.getSelectedIndex();
            if (index == 0) {
                for (int i = 0; i < graphs.length; i++) {
                    myGraph1.graph.graphRenderer[i].xValues = xValues;
                    myGraph1.graph.graphRenderer[i].yValues = graphs[i].yValues;
                }
            } else {
                for (int i = 0; i < graphs.length; i++) {
                    if (i == index - 1) {
                        myGraph1.graph.graphRenderer[i].xValues = xValues;
                        myGraph1.graph.graphRenderer[i].yValues = graphs[i].yValues;
                    } else {
                        myGraph1.graph.graphRenderer[i].xValues = nullValue;
                        myGraph1.graph.graphRenderer[i].yValues = nullValue;
                    }
                }
            }

            counter++;
        }
        dontRefresh = false;

        if (newbufflen != bufflen) {
            bufflen = newbufflen;
            init();
        }
    }

    public void fillBuffer(double[] values, int counter, double value) {
        for (int i = counter; i < bufflen; i++)
            values[i] = value;
    }

    public void scrollBuffer(double[] values, int counter, double value) {
        System.arraycopy(values, 1, values, 0, bufflen - 1);
        values[bufflen - 1] = value;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSplitPane jSplitPane1;
    private MyGraph.MyGraph myGraph1;
    // End of variables declaration//GEN-END:variables
}
