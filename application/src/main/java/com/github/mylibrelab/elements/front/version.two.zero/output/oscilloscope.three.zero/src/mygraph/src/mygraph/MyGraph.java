/*
 * Copyright (C) 2020 MyLibreLab
 * Based on MyOpenLab by Carmelo Salafia www.myopenlab.de
 * Copyright (C) 2004  Carmelo Salafia cswi@gmx.de
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package com.github.mylibrelab.elements.front.version.two.zero.output.oscilloscope.three.zero.src.mygraph.src.mygraph;

import java.awt.*;

/**
 * @author Homer
 */
public class MyGraph extends javax.swing.JPanel {

    public MyGraphX graph = new MyGraphX();
    public Turn90Label labelLeft = new Turn90Label("Y-Axis");
    public javax.swing.JPanel jPanel2;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;

    /**
     * Creates new form MyGraph
     */
    public MyGraph() {
        initComponents();
        add(labelLeft, BorderLayout.WEST);
        add(graph, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        setOpaque(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setOpaque(false);
        jPanel2.setBackground(new java.awt.Color(51, 255, 51));
        jPanel2.setOpaque(false);
        jPanel1.add(jPanel2, java.awt.BorderLayout.WEST);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("X-Axis");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

    }// </editor-fold>//GEN-END:initComponents

    // ----------- GETTER ---------
    public Boolean getBackgroundTransparent() {
        return new Boolean(graph.back.getBackgroundTransparent());
    }

    public Color getGridBackgroundColor() {
        return graph.back.getBackground();
    }

    public Color getGridLineColor() {
        return graph.back.colorGrid;
    }

    public Color getGridSublineColor() {
        return graph.back.colorSubGrid;
    }

    // ----------- SETTER ---------
    // public void setBackgroundTransparent(Boolean value) {
    // graph.back.setBackgroundTransparent(value.booleanValue());}
    // public void setGridBackgroundColor(Color color) { graph.back.setBackground(color); }
    // public void setGridLineColor(Color color) { graph.back.colorGrid=color; }
    public void setGridSublineColor(Color color) {
        graph.back.colorSubGrid = color;
    }

    public Font getXYAxisFont() {
        return graph.xaxis.stdFont;
    }

    public void setXYAxisFont(Font font) {
        graph.xaxis.stdFont = font;
        graph.yaxis.stdFont = font;
    }

    public Color getXYAxisFontColor() {
        return graph.xaxis.getFontColor();
    }

    public void setXYAxisFontColor(Color color) {
        graph.xaxis.setFontColor(color);
        graph.yaxis.setFontColor(color);
    }

    public Boolean getXYAxisVisible() {
        return new Boolean(graph.xyAxisVisible);
    }

    public void setXYAxisVisible(Boolean value) {
        graph.setXYAxisVisible(value.booleanValue());
    }

    public Double getMinX() {
        return new Double(graph.xaxis.getMin());
    }

    public void setMinX(Double value) {
        graph.xaxis.setMin(value.doubleValue());
    }

    public Double getMaxX() {
        return new Double(graph.xaxis.getMax());
    }

    public void setMaxX(Double value) {
        graph.xaxis.setMax(value.doubleValue());
    }
    // public void setPointType(Integer value) { graph.back.pointType=value.intValue(); }
    // public void setLineColor(Color color) { graph.back.setLineColor(color); }

    public Boolean getAutoZoomX() {
        return new Boolean(graph.back.autoScaleX);
    }

    public void setAutoZoomX(Boolean value) {
        graph.setAutoZoomX(value.booleanValue());
    }

    public Font getXAxisTextFont() {
        return jLabel1.getFont();
    }

    public void setXAxisTextFont(Font font) {
        jLabel1.setFont(font);
    }

    public Color getXAxisTextFontColor() {
        return jLabel1.getForeground();
    }

    public void setXAxisTextFontColor(Color color) {
        jLabel1.setForeground(color);
    }

    public String getXAxisFormatString() {
        return graph.xaxis.getFormatString();
    }

    public void setXAxisFormatString(String value) {
        graph.xaxis.setFormatString(value);
    }

    public String getXAxisText() {
        return jLabel1.getText();
    }

    public void setXAxisText(String text) {
        jLabel1.setText(text);
    }

    public Double getMinY() {
        return new Double(graph.yaxis.getMin());
    }

    public void setMinY(Double value) {
        graph.yaxis.setMin(value.doubleValue());
    }

    public Double getMaxY() {
        return new Double(graph.yaxis.getMax());
    }

    public void setMaxY(Double value) {
        graph.yaxis.setMax(value.doubleValue());
    }

    public Boolean getAutoZoomY() {
        return new Boolean(graph.back.autoScaleY);
    }

    public void setAutoZoomY(Boolean value) {
        graph.setAutoZoomY(value.booleanValue());
    }

    public String getYAxisFormatString() {
        return graph.yaxis.getFormatString();
    }

    public void setYAxisFormatString(String value) {
        graph.yaxis.setFormatString(value);
    }

    public String getYAxisText() {
        return labelLeft.getText();
    }

    public void setYAxisText(String text) {
        labelLeft.setText(text);
    }

    public Font getYAxisTextFont() {
        return labelLeft.getFont();
    }
    // public Integer getPointType( ) {return new Integer(graph.back.pointType); }
    // public Color getLineColor( ) {return graph.back.getLineColor(); }

    public void setYAxisTextFont(Font font) {
        labelLeft.setFont(font);
    }

    public Color getYAxisTextFontColor() {
        return labelLeft.getForeground();
    }

    public void setYAxisTextFontColor(Color color) {
        labelLeft.setForeground(color);
    }

    private void formComponentResized(java.awt.event.ComponentEvent evt)// GEN-FIRST:event_formComponentResized
    {// GEN-HEADEREND:event_formComponentResized
        jPanel2.setPreferredSize(new Dimension(labelLeft.getWidth() + graph.p1.x, jPanel2.getHeight()));
    }// GEN-LAST:event_formComponentResized
     // End of variables declaration//GEN-END:variables

}
